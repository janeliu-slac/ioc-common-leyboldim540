# Leybold IM540 Stream Protocol File 
#
InTerminator  = CR LF;
OutTerminator = CR LF;
ReplyTimeout  =  1000;
ReadTimeout   =  300;
WriteTimeout  =  300;
ExtraInput    = Ignore;

#####
# Interface: RS232
# Default: 9600,8 data bits,No partiy, 1 stop bit
# TERMINOLOGY
# CTRL
# Char    VALUE    SIGNIFICANCE
# <ETX>   03h      End of text. Interface reset. (Deletes the input buffer contents of the IM 540, does not generate any further response)
# <ENQ>   05h      Enquiry. Request to transfer the output buffer contents of the IM 540.
# <ACK>   06h      Acknowledge.
# <NAK>   15h      Negative Acknowledge.

# Communication sequence
# Successfull sequence
# S: COMMAND<CR><LF>
# R: <ACK><CR><LF>
# S: <ENQ><CR><LF>
# R: RESPONSE_ON_COMMAND<CR><LF>

# Negative sequence
# S: COMMAND<CR><LF>
# R: <NAK><CR><LF>
# S: <ENQ><CR><LF>
# R: XX<CR><LF> (XX = Error code)


SEND           { out "%s"; in "%(\$1:\$2.VAL)24c"; @replytimeout{;}; @readtimeout{;}; }
RCVE           { in "%39c"; @replytimeout{;}; @readtimeout{;}; }

# Reset interface error 
resetError          { out "REC,80";         in ACK; }  #Reset all errors
resetDevice         { out "RES";            in ACK; }  #Reset the device. Trigger a software reset via Watchdog-Timeout

# Device data
getERR              { out "ERR";                       #Get serial error code
                      in  ACK;
                      out ENQ;
                      in  "%X";                        #2-digit hex number
                    }
getGDE              { out "GDE";                       #Get global device error 
                      in  ACK;
                      out ENQ;
                      in  "%X"; #4-digit hex number
                    }
getISE              { out "ISE";                       #Ioni supply Errors
                      in  ACK;
                      out ENQ;
                      in  "%X"; #4-digit hex number
                    }
getISW              { out "ISW";                       #Ioni supply Warnings
                      in  ACK;
                      out ENQ;
                      in  "%X"; #4-digit hex number
                    }
#getDegas            { out "DGS";                       #Execute/read degassing status
#                     in  ACK;
#                     out ENQ;
#                      in  "%(degas_status_RBV)d";
#                    }
#setDegas            { out "DGS,%{0|1}";
#                      in  ACK;
#                     out ENQ;
#                     in  "%(degas_status_RBV)d";
#                    }
getEMI              { out "EMI,\$1";                   #Switch ON/OFF emission, Read Emission status
                      in  ACK;
                      out ENQ;
                      in  "%*d,%d";
                    } 
setEMI              { out "EMI,\$1,%d";
                      in  ACK;
                      out ENQ;
                      in  "%*d,%*d";
                    }
getOFC              { out "OFC,\$1";                   #Offset correction Ch1-Ch4
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setOFC              { out "OFC,\$1,%d";
                      in  ACK;
                      out ENQ;
                      in  "%*d";
                    }
getPRX              { out "PRX";                        #Get pressure reading and status from all 4 CH
                      in  ACK;
                      out ENQ;
                      in  "%(\$1.RVAL)X,%(\$2.VAL)E,%(\$3.RVAL)X,%(\$4.VAL)E,%(\$5.RVAL)X,%(\$6.VAL)E,%(\$7.RVAL)X,%(\$8.VAL)E";
                    }