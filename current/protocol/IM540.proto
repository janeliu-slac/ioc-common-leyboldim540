# Leybold IM540 Stream Protocol File 
#
InTerminator  = CR LF;
OutTerminator = CR LF;
ReplyTimeout  =  1000;
ReadTimeout   =  300;
WriteTimeout  =  300;
ExtraInput    = Ignore;

#####
# Interface: RS232
# Default: 9600, 8 data bits, No partiy, 1 stop bit
# TERMINOLOGY
# CTRL
# Char    VALUE    SIGNIFICANCE
# <ETX>   03h      End of text. Interface reset. (Deletes the input buffer contents of the IM 540, does not generate any further response)
# <ENQ>   05h      Enquiry. Request to transfer the output buffer contents of the IM 540.
# <ACK>   06h      Acknowledge.
# <NAK>   15h      Negative Acknowledge.

# Communication sequence
# Successfull sequence
# S: COMMAND<CR><LF>
# R: <ACK><CR><LF>
# S: <ENQ><CR><LF>
# R: RESPONSE_ON_COMMAND<CR><LF>

# Negative sequence
# S: COMMAND<CR><LF>
# R: <NAK><CR><LF>
# S: <ENQ><CR><LF>
# R: XX<CR><LF> (XX = Error code)

# Reset interface error 
resetError          { out "REC,80";         in ACK; }  #Reset all errors
resetDevice         { out "RES";            in ACK; }  #Reset the device. Trigger a software reset via Watchdog-Timeout

# Device data
getERR              { out "ERR";                       #Get serial error code
                      in  ACK;
                      out ENQ;
                      in  "%X";                        #2-digit hex number
                    }
getGDE              { out "GDE";                       #Get global device error 
                      in  ACK;
                      out ENQ;
                      in  "%X"; #4-digit hex number
                    }
getISE              { out "ISE";                       #Ioni supply Errors
                      in  ACK;
                      out ENQ;
                      in  "%X"; #4-digit hex number
                    }
getISW              { out "ISW";                       #Ioni supply Warnings
                      in  ACK;
                      out ENQ;
                      in  "%X"; #4-digit hex number
                    }
getVSE              { out "VSE";                       #Voltage supply Errors
                      in  ACK;
                      out ENQ;
                      in  "%X"; #4-digit hex number
                    }
getVSW              { out "VSW";                       #Voltage supply Warnings
                      in  ACK;
                      out ENQ;
                      in  "%X"; #4-digit hex number
                    }
getEMI              { out "EMI,\$1";                   #Switch ON/OFF emission, Read Emission status
                      in  ACK;
                      out ENQ;
                      in  "%*d,%d";
                    } 
setEMI              { out "EMI,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d,%*d";
                    }
getOFC              { out "OFC,\$1";                   #Offset correction Ch1-Ch4
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setOFC              { out "OFC,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getPRX              { out "PRX";                        #Get pressure reading and status from all 4 CH
                      in  ACK;
                      out ENQ;
                      in  "%(\$1.RVAL)X,%(\$2.VAL)E,%(\$3.RVAL)X,%(\$4.VAL)E,%(\$5.RVAL)X,%(\$6.VAL)E,%(\$7.RVAL)X,%(\$8.VAL)E";
                    }
getBCC              { out "BCC,\$1";                    # Get/Set Bayard Alpert Sensor Constant Emission Current
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setBCC              { out "BCC,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getCAO              { out "CAO,\$1";             #in the datasheet it says COC #Get/Set CTR-Sensor Auto Offset
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setCAO              { out "CAO,\$1,%1d";         #in the datasheet it says COC
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getCST              { out "CST,\$1";             #Get/Set CTR Sensor Type
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setCST              { out "CST,\$1,%2d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getFCO              { out "FCO";                 #Get automatic sensor selection in case of an error 
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
getRMO              { out "RMO";                 #Get/Set recorder mode
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setRMO              { out "RMO,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getRSC              { out "RSC,\$1";             #Get/Set Recorder Scale
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setRSC              { out "RSC,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getRSL              { out "RSL,\$1";             #Recorder Scale Limits (only if Recorder mode is set to IM540 Mode)
                      in  ACK;
                      out ENQ;
                      in  "%(\$2.VAL)E,%(\$2.VAL)E";
                    }
setRSL_LOW          { out "RSL,\$1,%E,%(\$2.VAL)E";
                      in  ACK;
#                      out ENQ;
#                      in  "%*E,%*E";
                    }
setRSL_HIGH         { out "RSL,\$1,%(\$2.VAL)E,%E";
                      in  ACK;
#                      out ENQ;
#                      in  "%*E,%*E";
                    }
getRSM              { out "RSM,\$1";              #Recorder Scale mode (only if Recorder mode is set to IM540 Mode)
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setRSM              { out "RSM,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getRSO              { out "RSO,\$1";              #Assign a measuring channel to a recorder output (only if Recorder mode is set to IM540 Mode)
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setRSO              { out "RSO,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getSAC              { out "SAC,\$1";              #Get/Set sensor amplification correction
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
setSAC              { out "SAC,\$1,%f";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getSAS              { out "SAS,\$1";              #Get/Set sensor amplifier sensitivity
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setSAS              { out "SAS,\$1,%d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
setSCA              { out "SCA";                  #Reactiavate sensor control after changing the SCS, SCM, SCC, SCL, SCT
                      in  ACK;
                    }
getSCC              { out "SCC,\$1";              #Get/Set sensor control channel
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setSCC              { out "SCC,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getSCL              { out "SCL,\$1";              #Range limits for starting up and shutting down the sensor. The sensor control mode should be AUTO or SELF
                      in  ACK;
                      out ENQ;
                      in  "%(\$2.VAL)E,%(\$3.VAL)E";
                    }
setSCL_LOW          { out "SCL,\$1,%E,%(\$2.VAL)E";
                      in  ACK;
#                      out ENQ;
#                      in  "%*E,%*E";
                    }
setSCL_HIGH         { out "SCL,\$1,%(\$2.VAL)E,%E";
                      in  ACK;
#                      out ENQ;
#                      in  "%*E,%*E";
                    }
getSCM              { out "SCM,\$1";               #Sensor control mode
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setSCM              { out "SCM,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getSCS              { out "SCS";                   #Sensor control setting
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setSCS              { out "SCS,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getSCT              { out "SCT";                   #Sensor control TTR
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setSCT              { out "SCT,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getSFP              { out "SFP,\$1";               #Sensor Filament Power
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
setSFP              { out "SFP,\$1,%f";
                      in  ACK;
#                      out ENQ;
#                     in  "%*f";
                    }
getSGC              { out "SGC,\$1";                #Sensor gas correction
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setSGC              { out "SGC,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getSMF              { out "SMF,\$1";                 #Sensor measuring filter
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setSMF              { out "SMF,\$1,%1d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getSSV              { out "SSV,\$1";                 #Sensor sensitivity value
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
setSSV              { out "SSV,\$1,%f";
                      in  ACK;
#                      out ENQ;
#                      in  "%*f";
                    }
getSXR              { out "SXR,\$1";                 #X-ray limit for Ioni sensors
                      in  ACK;
                      out ENQ;
                      in  "%E";
                    }
setSXR              { out "SXR,\$1,%E";
                      in  ACK;
#                      out ENQ;
#                      in  "%*E";
                    }
getUNI              { out "UNI";                     #Pressure unit
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
setUNI              { out "UNI,%d";
                      in  ACK;
#                      out ENQ;
#                      in  "%*d";
                    }
getIEC              { out "IEC";                      #Ioni emission current
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
getSRL              { out "SRL,\$1";                  #Sensor Range Limits
                      in  ACK;
                      out ENQ;
                      in  "%*d,%(\$2.VAL)E,%(\$3.VAL)E";
                    }
getSTI              { out "STI,\$1";                  #Type of sensor connected to the addressed channel
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
getGAV              { out "GAV";                      #Gauge anode voltage
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
getGCV              { out "GCV";                      #Gauge cathode voltage
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
getGEC              { out "GEC";                      #Gauge emission current
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
getGFC              { out "GFC";                      #Gauge filament current
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
getGFP              { out "GFP";                      #Gauge filament power
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
getGFU              { out "GFU";                      #Gauge filament voltage
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
getGRV              { out "GRV";                      #Gauge reflector voltage
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
getIDO              { out "IDO";                      #Device operation time
                      in  ACK;
                      out ENQ;
                      in  "%d";
                    }
getISO              { out "ISO,\$1";                  #Current offset value of measuirng channel (Ch1-Ch4)
                      in  ACK;
                      out ENQ;
                      in  "%f";
                    }
getIST              { out "IST,\$1";                  #Operation time of the sensors (Ch1-Ch4)
                      in  ACK;
                      out ENQ;
                      in  "%(\$2.VAL)f,%(\$3.VAL)f";
                    }
